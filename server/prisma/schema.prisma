generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://afraadmin:@1234@localhost:3306/afrana"
}

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   viewCount Int      @default(0)
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  Int?
// }

enum UserRole {
  Doctor
  Secretary
  Admin
  SuperAdmin
}

enum Status {
  Active
  Suspended
}

enum Gender {
  Male
  Female
}

enum TransactionType {
  NewShipment
  NewReception
  SystemModification
}

model User {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  firstName   String
  lastName    String
  username    String        @unique
  password    String
  role        UserRole
  state       Status
  AccessToken AccessToken[]
}

model AccessToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  hashed    String
}

enum DrugType {
  B2
  Opium
  Metadon
}

model Patient {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  firstName  String
  lastName   String
  birthDate  DateTime
  nationalID String       @unique
  address    String
  phone      String
  landLine   String
  gender     Gender
  dossier    Dossier[]
  attachment Attachment[]
}

model Attachment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  fileAddress String
  dossier     Dossier? @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  dossierId   Int?
  patientId   Int?
  patient     Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Dossier {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  patient       Patient?     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId     Int
  drugType      DrugType
  state         Status
  records       Reception[]
  attachments   Attachment[]
  inQueue       Boolean      @default(false)
  dossierNumber String?      @unique
}

model Reception {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  datetime    DateTime            @default(now())
  dossier     Dossier?            @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  dossierId   Int?
  drugDose    Int
  description String?             @db.VarChar(4096)
  transaction StorageTransaction?
}

model Settings {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  value String?
}

model Storage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  drug      DrugType @unique
  quantity  Int
}

model StorageTransaction {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  date        DateTime
  drug        DrugType
  quantity    Int
  reception   Reception?      @relation(fields: [receptionId], references: [id], onDelete: Cascade)
  receptionId Int?            @unique
  type        TransactionType
}
